<?xml version="1.0" encoding="utf-8"?>
<!--
   Copyright 2014 Daniel Cazzulino

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	
	<!--
    ============================================================
              AssemblyInfo Generation Properties
	
	- GenerateAssemblyInfo
	Whether to generate the assembly info on build.
	Default: true
	
	- AssemblyVersionFormat
	Format string to use when generating the AssemblyVersionAttribute
	value. Of the form: MAJOR.MINOR.PATCH-PRERELEASE
	In order for the version string to satisfy SemVer rules, it must 
	contain at least the MAJOR.MINOR.PATCH segments, but any one can 
	be fixed to a value if so desired, i.e. MAJOR.MINOR.0 (to never 
	increment the PATCH segment of the SemVer, for AssemblyVersion 
	for example, which is a common practice).
	
	- AssemblyFileVersionFormat
	Format string to use when generating the AssemblyFileVersionAttribute 
	value. Same format as the AssemblyVersionFormat string.
	
	- AssemblyInformationalVersionFormat
	Format string to use when generating the AssemblyInformationalVersionAttribute 
	value. Same format as the AssemblyVersionFormat string.
	
	- PreReleasePrefix
	Prefix used for non-tagged releases (that is, when there are 
	additional commits on top of the newest tag. This prefix 
	is added after the dash and before the commit SHA, following
	SemVer rules, i.e.: 1.0.2-SHAccbf25. 
	Default: SHA.
	
	When the replacement token PRERELEASE is used in an assembly 
	or nuspec version format, the prefix is prepended to the 
	commit SHA.
	============================================================
	-->
	<PropertyGroup>
		<GenerateAssemblyInfo>true</GenerateAssemblyInfo>
		<AssemblyVersionFormat>MAJOR.MINOR.0</AssemblyVersionFormat>
		<AssemblyFileVersionFormat>MAJOR.MINOR.PATCH</AssemblyFileVersionFormat>
		<AssemblyInformationalVersionFormat>MAJOR.MINOR.PATCH-PRERELEASE</AssemblyInformationalVersionFormat>
		<PreReleasePrefix>SHA</PreReleasePrefix>
	</PropertyGroup>

	<!--
    ============================================================
              GitExe Property
	
	Cascading probing mechanism will try to locate an installed 
	version of git, msysgit or cygwin git.
	============================================================
	-->
	<PropertyGroup>
		<GitExe>git.exe</GitExe>
		<GitExe Condition="Exists('C:\Program Files\Git\bin\git.exe')">C:\Program Files\Git\bin\git.exe"</GitExe>
		<GitExe Condition="Exists('C:\Program Files (x86)\Git\bin\git.exe')">C:\Program Files (x86)\Git\bin\git.exe</GitExe>
		<GitExe Condition="Exists('C:\msysgit\bin\git.exe')">C:\msysgit\bin\git.exe</GitExe>
		<GitExe Condition="Exists('C:\cygwin\bin\git.exe')">C:\cygwin\bin\git.exe</GitExe>
	</PropertyGroup>

	<!--
    ============================================================
              GitRoot Property
	
	This property determines the root of the git repository which 
	is used to generate the change log, calculate the current 
	version, etc. If not specified explicitly, it will try to 
	determine its value from the location of the .gitignore or 
	.gitattributes file which can exist alongside this targets 
	file or in any ancestor path.
	
	The property never includes the trailing slash.
	============================================================
	-->
	<PropertyGroup Condition="'$(GitRoot)' == ''">
		<!-- Try .gitignore first -->
		<GitRoot Condition="Exists('$(MSBuildThisFileDirectory).gitignore')">$(MSBuildThisFileDirectory)</GitRoot>
		<GitRoot Condition="'$(GitRoot)' == ''">$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), .gitignore))</GitRoot>

		<!-- Try .gitattributes next -->
		<GitRoot Condition="'$(GitRoot)' == '' AND Exists('$(MSBuildThisFileDirectory).gitattributes')">$(MSBuildThisFileDirectory)</GitRoot>
		<GitRoot Condition="'$(GitRoot)' == ''">$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), .gitattributes))</GitRoot>
	</PropertyGroup>

</Project>