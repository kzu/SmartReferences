<?xml version="1.0" encoding="utf-8"?>
<!--
   Copyright 2014 Daniel Cazzulino

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<PropertyGroup Condition="'$(GenerateChangeLog)' == 'true'">
		<BuildDependsOn>
			$(BuildDependsOn);
			SemanticGit:GenerateChangeLog;
		</BuildDependsOn>		
	</PropertyGroup>

	<PropertyGroup>
		<!-- Normalize props -->
		<GitHubUrl Condition="'$(GitHubUrl)' != '' AND !$(GitHubUrl.EndsWith('/'))">$(GitHubUrl)/</GitHubUrl>
		<GitRoot Condition="HasTrailingSlash('$(GitRoot)')">$(GitRoot.TrimEnd('\'))</GitRoot>
	</PropertyGroup>
	
	<Import Project="SemanticGit.Changelog.tasks" />

	<ItemGroup>
		<_HeadInput Include="$(GitRoot)\.git\HEAD;$(GitRoot)\.git\refs\heads\*.*" />
	</ItemGroup>

	<Target Name="SemanticGit:GenerateChangeLog"
			DependsOnTargets="SemanticGit:GenerateTextLog;SemanticGit:GenerateMarkdownLog" />

	<Target Name="SemanticGit:GenerateTextLog"
			Inputs="@(_HeadInput)"
			Outputs="$(GitRoot)\$(ChangeLog)"
			DependsOnTargets="SemanticGit:GetTagCommits">
		<!-- This DependsOnTargets is suboptimal since the inputs/outputs may determine  
		     that this target doesn't need to run at all and we'd have still 
			 retrieved all tag commits.
		-->
		
		<!-- TODO: make this incremental -->
		<WriteLinesToFile File="$(GitRoot)\$(ChangeLog)" Overwrite="true" />
		<WriteLinesToFile File="$(GitRoot)\$(ChangeLog)" Lines="%(_Tags.Title)
%(_Tags.Commits)%0a" Condition="'%(_Tags.Identity)' != ''"/>

		<Message Text="Generated $(ChangeLog) file." Importance="normal" />
	</Target>

	<Target Name="SemanticGit:GenerateMarkdownLog"
			Condition="'$(GitHubUrl)' != ''"
			Inputs="@(_HeadInput)"
			Outputs="$(GitRoot)\$(ChangeLog).md"
			DependsOnTargets="SemanticGit:GetTagCommits">
		<!-- This DependsOnTargets is suboptimal since the inputs/outputs may determine  
		     that this target doesn't need to run at all and we'd have still 
			 retrieved all tag commits.
		-->

		<!-- TODO: make this incremental -->
		<WriteLinesToFile File="$(GitRoot)\$(ChangeLog).md" Overwrite="true" />

		<WriteLinesToFile File="$(GitRoot)\$(ChangeLog).md"
						  Condition="'%(_Tags.Identity)' != ''"
						  Lines="## [%(_Tags.Title)]($(GitHubUrl)/releases/tag/%(_Tags.Title))
%(_Tags.LinkedCommits)%0a" />

		<Message Text="Generated $(ChangeLog).md GitHub linked markdown file for repository base url $(GitHubUrl)." Importance="normal" />
	</Target>
	
	<Target Name="SemanticGit:GetHead">

		<RunGit Exe="$(GitExe)" Args="describe --tags" WorkingDir="$(MSBuildProjectDirectory)">
			<Output TaskParameter="Output" PropertyName="_HeadTag" />
		</RunGit>
		
	</Target>
	
	<Target Name="SemanticGit:GetTags" DependsOnTargets="SemanticGit:GetHead">
		
		<RunGit Exe="$(GitExe)" Args="tag -n1" WorkingDir="$(MSBuildProjectDirectory)">
			<Output TaskParameter="Output" PropertyName="_TagOutput" />
		</RunGit>

		<ParseSemanticTags Input="$(_TagOutput)" HeadTag="$(_HeadTag)" HeadTagText="$(HeadTagText)">
			<Output TaskParameter="Tags" ItemName="_Tags" />
		</ParseSemanticTags>

	</Target>
	
	<Target Name="SemanticGit:GetTagCommits" Inputs="@(_Tags)" Outputs="%(Identity)" 
			DependsOnTargets="SemanticGit:GetTags"
			Returns="@(_Tags)">

		<RunGit Exe='$(GitExe)' Args='log %(_Tags.Range) --pretty="$(CommitFormat)"' WorkingDir='$(MSBuildProjectDirectory)'>
			<Output TaskParameter="Output" PropertyName="_CommitLog" />
		</RunGit>

		<RegexReplace Input="$(_CommitLog)"
					  Pattern="(\#(\d+))"
					  Replacement="[$1]($(GitHubUrl)/issues/$2)"
					  Condition="'$(GitHubUrl)' != ''">
			<Output TaskParameter="Output" PropertyName="_LinkedCommitLog" />
		</RegexReplace>
		
		<ItemGroup>
			<_Tags>
				<Commits>$(_CommitLog)</Commits>
				<LinkedCommits>$(_LinkedCommitLog)</LinkedCommits>
			</_Tags>
		</ItemGroup>

	</Target>

</Project>