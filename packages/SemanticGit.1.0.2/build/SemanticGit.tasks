<!--
   Copyright 2014 Daniel Cazzulino

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">


	<!--
    ============================================================
              GetSemanticVersion Task
			  
	Provides http://semver.org/ compatible version number
	from gitflow tagged repositories, making it easy to 
	have ongoing pre-release software that has easily 
	reproducible builds.
	
    [IN]
	Tag        - The tag returned by git describe -tags

    [OUT]
	Major      - The MAJOR component of the semantic version tag
	Minor      - The MINOR component of the semantic version tag
	Patch      - The PATCH component of the semantic version tag
	Commit     - The optional SHA value of the last commit after 
                 tagging (none for the release immediate after tagging). 
                    
                 i.e.:
                 
                 "1.0.0" = Repo HEAD is at the tag 1.0.0 itself, 
                 with zero commits after the tag.
                 
                 "1.0.1-928e945" = Repo is a pre-release with 
                 one commit after the "1.0.0" release, with hash 
                 928e945.
	============================================================
	-->

	<UsingTask
		TaskName="GetSemanticVersion"
		TaskFactory="CodeTaskFactory"
		AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll">

		<ParameterGroup>
			<Tag Required="true"/>
			<Major Output="true"/>
			<Minor Output="true"/>
			<Patch Output="true"/>
			<Commit Output="true"/>
		</ParameterGroup>

		<Task>
			<Using Namespace="System.Text.RegularExpressions"/>
			<Code Type="Fragment" Language="cs">
				<![CDATA[
			

			var semanticGitExpression = @"^v?(?<Major>\d+)\.(?<Minor>\d+)\.(?<Patch>\d+)(-(?<Revision>\d+)-g(?<Commit>[0-9a-z]+))?$";

			var match = Regex.Match(Tag, semanticGitExpression, RegexOptions.IgnoreCase | RegexOptions.ExplicitCapture);

			if (!match.Success)
			{
				Log.LogError("Current head tag {0} does not comply to semantic versioning. Must be MAYOR.MINOR.PATCH[-COMMITS-gHASH].", Tag);
				return false;
			}

			Major = match.Groups["Major"].Value;
			Minor = match.Groups["Minor"].Value;
			Commit = match.Groups["Commit"].Value;

			var patch = int.Parse(match.Groups["Patch"].Value);

			// If there are commits on top, we add them to the patch number.
			if (match.Groups["Revision"].Success)
				patch += int.Parse(match.Groups["Revision"].Value);

			Patch = patch.ToString();

			
]]>
			</Code>
		</Task>

	</UsingTask>


	<!--
    ============================================================
              RunGit Task
	
        [IN]
        Exe	       - The path to Git.exe
		Args       - The command line arguments to git
		WorkingDir - The base directory to use to run git.

        [OUT]
		Output     - The raw text output string from git.
	============================================================
	-->

	<UsingTask
		TaskName="RunGit"
		TaskFactory="CodeTaskFactory"
		AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll">

		<ParameterGroup>
			<Exe Required="true"/>
			<Args Required="false"/>
			<WorkingDir Required="true"/>
			<Output Output="true"/>
		</ParameterGroup>

		<Task>
			<Using Namespace="System.Diagnostics"/>
			<Code Type="Fragment" Language="cs">
				<![CDATA[
			

			var psi = new ProcessStartInfo
			{
				CreateNoWindow = true,
				UseShellExecute = false,
				RedirectStandardOutput = true,
				RedirectStandardError = true,
				WorkingDirectory = WorkingDir,
				FileName = Exe,
				Arguments = Args
			};

			Log.LogMessage(MessageImportance.Low, "Executing: {0} {1}", Exe, Args);

			var p = Process.Start(psi);
			Output = p.StandardOutput.ReadToEnd().Trim();
			Log.LogMessage(MessageImportance.Low, Output);

			var errors = p.StandardError.ReadToEnd().Trim();
			if (errors.Length > 0)
			{
				Log.LogError(errors);
				return false;
			}

			
]]>
			</Code>
		</Task>

	</UsingTask>

</Project>
